
Creando mutation e input para nuevos clientes
---

Si tienes una api debe tener un endpoint donde el usuario pueda crear un registro.

---

El mutation es la forma de cambiar o crear nuevos datos.

---

mutation {
	crearCliente(input: {
		nombre: "Alquies"
		apellido: "Canto"
		empresa: "salsa"
		email: "a.bailo@gmai.com"
	}){
		id
		nombre
		apellido
	}
}

---

Result

{
  "data": {
    "crearCliente": {
      "id": "87a04936b9c39378df60",
      "nombre": "Alquies",
      "apellido": "Canto"
    }
  }
}
---

Más sobre los resolvers y obtener un registro por id

Resolver son funciones que van a hacer las interaciones con el schema de GraphQL.

{
  getCliente(id: "4ed9209c52ef5f6f29d0"){
    empresa
    nombre
    apellido
  }
}

---
Result

{
  "data": {
    "getCliente": {
      "empresa": "salsa",
      "nombre": "Alquies",
      "apellido": "Bailo"
    }
  }
}
---

Tipos de datos en GraphQL

INT = Número enteros
FLOAT = Número con decimales
STRING = cadena de texto
ID = número único
BOOLEAN = true o false
---

En el type del objeto, el input y en el resolver al agregar un nuevo dato 
de cualquier tipo, en el objeto especifico que se modifique su estructura.

---

Tipos de dato Enum

enum tipoCliente{
        BASICO
        ESTADAR
        AVANZADO
}

---

mutation {
	crearCliente(input: {
		nombre: "Alquies"
		apellido: "Bailo"
		empresa: "salsa"
		email: "a.bailo@gmai.com"
    		edad: 25
    		tipo: BASICO
	}){
		id
		nombre
		apellido
    tipo
	}
}

--

Result

{
  "data": {
    "crearCliente": {
      "id": "122154befc37ca5bb4cc",
      "nombre": "Alquies",
      "apellido": "Bailo",
      "tipo": "BASICO"
    }
  }
}

---

Como agregar campos anidados en el código

schema

    type Cliente{
        id: ID
        nombre: String
        apellido: String
        empresa: String
        emails: [Email]
        edad: Int
        tipo: tipoCliente
        pedidos: [Pedido]
    }
    type Pedido{
        producto: String
        precio: Int
    }
    type Email{
        email: String
    }
    type Query {
        getCliente(id: ID): Cliente
    }
    enum tipoCliente{
        BASICO
        ESTADAR
        AVANZADO
    }
    input EmailInput{
        email: String
    }
    input PedidoInput{
        producto: String
        precio: Int
    }
    input ClienteInput{
        id: ID
        nombre: String!
        apellido: String!
        empresa: String!
        emails: [EmailInput]
        edad: Int!
        tipo: tipoCliente
        pedidos: [PedidoInput]
    }
    type Mutation{
        crearCliente(input: ClienteInput): Cliente
    }  

---
 

mutation {
	crearCliente(input: {
		nombre: "Alquies"
		apellido: "Bailo"
		empresa: "salsa"
		emails: [
      			{
        				email: "a.bailo@gmail.com"
      			}
      			{
        				email: "aquiles.b@gmail.com"
      			}
    		]
    		edad: 25
    		tipo: BASICO
    		pedidos: [
    			{
        				producto: "Curso GraphQL"
        				precio: 10
      			}
    			{
    				producto: "Computador DELL"
        				precio: 200000
  			}
  		]
	}){
		id
		nombre
		apellido
    		tipo
    		emails{
      			email
    		}
    		pedidos{
      			producto
      			precio
   		 }
	}
}

---

Result

{
  "data": {
    "crearCliente": {
      "id": "439892079f1f8fdcdc35",
      "nombre": "Alquies",
      "apellido": "Bailo",
      "tipo": "BASICO",
      "emails": [
        {
          "email": "a.bailo@gmail.com"
        },
        {
          "email": "aquiles.b@gmail.com"
        }
      ],
      "pedidos": [
        {
          "producto": "Curso GraphQL",
          "precio": 10
        },
        {
          "producto": "Computador DELL",
          "precio": 200000
        }
      ]
    }
  }
}

---

Comentarios en GraphQL

Existen dos tipos:

1.- Te permite agregar una descripción en GraphiQL """ Comentario de descripción """
2.- Te permite comentar el código que va hacer ignorado por GraphQL 
no se ejecuta # Comentario

---









