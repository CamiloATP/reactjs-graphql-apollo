Se instala gestor de base de datos NoSQL Robo 3T.

---

mutation {
  actualizarCliente(input: {
    id: "5caa3c4d2f38001fd4bf93fe", 
    nombre: "Alquies", 
    apellido: "Bailo y Canto", 
    empresa: "La misma", 
    edad: 25})
  {
    id
  }
}

---

mutation {
  crearCliente(input: {
         nombre: "Alquies"
         apellido: "Bailo"
         empresa: "salsa"
         emails: [
        {
         email: "a.bailo@gmail.com"
        }
       {
         email: "aquiles.b@gmail.com"
       }
     ]
    edad: 25
    tipo: BASICO
    pedidos: [
     {
        producto: "Curso GraphQL"
        precio: 10
      }
     {
      producto: "Computador DELL"
        precio: 200000
     }
    ]
}){
    id
    nombre
    apellido
    tipo
    emails{
      email
    }
    pedidos{
      producto
      precio
    }
}
}

---

mutation {
  eliminarCliente(id: "5caa3c4d2f38001fd4bf93fe")
}

---

{
  getClientes {
    id
    nombre
    empresa
  }
}

---

{
  getClientes(limit: 2){
    id
    nombre
  }
}

---

{
  getCliente(id: "5caa59ae61c6f3082086cf5f"){
    id
    nombre
  }
}

---

Alias

query {
  uno: getCliente(id: "5caa59ae61c6f3082086cf5f"){
    id
    nombre
  }
  
  dos:getCliente(id: "5caa59a961c6f3082086cf57"){
    id
    nombre
  }
}


---

Result

{
  "data": {
    "uno": {
      "id": "5caa59ae61c6f3082086cf5f",
      "nombre": "Alquies"
    },
    "dos": {
      "id": "5caa59a961c6f3082086cf57",
      "nombre": "Alquies"
    }
  }
}

---

Fragment

query {
  uno: getCliente(id: "5caa59ae61c6f3082086cf5f"){
    ...clienteFragment
    emails{
      email
    }
  }
  
  dos:getCliente(id: "5caa59a961c6f3082086cf57"){
    ...clienteFragment
  }
}

fragment clienteFragment on Cliente {
  id
  nombre
  apellido
  edad
  pedidos{
    producto
  }
}

---

Result

{
  "data": {
    "uno": {
      "id": "5caa59ae61c6f3082086cf5f",
      "nombre": "Alquies",
      "apellido": "Bailo",
      "edad": 25,
      "pedidos": [
        {
          "producto": "Curso GraphQL"
        },
        {
          "producto": "Computador DELL"
        }
      ],
      "emails": [
        {
          "email": "a.bailo@gmail.com"
        },
        {
          "email": "aquiles.b@gmail.com"
        }
      ]
    },
    "dos": {
      "id": "5caa59a961c6f3082086cf57",
      "nombre": "Alquies",
      "apellido": "Bailo",
      "edad": 25,
      "pedidos": [
        {
          "producto": "Curso GraphQL"
        },
        {
          "producto": "Computador DELL"
        }
      ]
    }
  }
}

---

Apollo Client y Server

Apollo es una plataforma que te permitirá realizar consultas a tus datos de GraphQL.

Entre ellos los query, los mutations.

Con Apollo te será muy sencillo conectar tus aplicaciones React con GraphQL.

También disponible para angular, javascript y react native.

---

API para realizar queries y mutations.

Cachear las consultas y datos.(Si tienes muchos datos y tienes muchas consultas 
por default va a cachar los datos y eso hace que tu aplicación sea un poco más rápido).

Es necesario configurar un cliente y un servidor (apollo client y apollo server).

Similar a redux

Existen otras opciones como Relay o GraphQL-Yoga

---

Configurando APollo server

> cd servidor
/* apollo-server */
> npm install --save apollo-server-express

Afuera de la carpeta servidor
/* React  -g = global*/
> npm install -g create-react-app

/* Crear aplicación */
> create-react-app /*nombre de la aplicación*/

cd cliente
/* Apollo Plugins */
> npm install --save apollo-boost react-apollo graphql graphql-tag

//// npm start ////

> cd cliente
> npm start 
---

> servidor
> npm start

---






























